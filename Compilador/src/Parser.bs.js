// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Token$Nqcc = require("./Token.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function parse_constant() {
  return /* Const */Block.__(1, [2]);
}

function parse_statement() {
  return /* Return */[/* Const */Block.__(1, [2])];
}

function parse_function(tokenList) {
  if (tokenList) {
    var remainingTokens = tokenList[1];
    if (Token$Nqcc.identificador(tokenList[0]) !== "IntKeyword") {
      console.log("Error, falta int");
    }
    if (remainingTokens) {
      var remainingTokens$1 = remainingTokens[1];
      if (Token$Nqcc.identificador(remainingTokens[0]) !== "Id") {
        console.log("Error, falta identificador");
      }
      if (remainingTokens$1) {
        var remainingTokens$2 = remainingTokens$1[1];
        if (Token$Nqcc.identificador(remainingTokens$1[0]) !== "OpenParen") {
          console.log("Error, falta (");
        }
        if (remainingTokens$2) {
          var remainingTokens$3 = remainingTokens$2[1];
          if (Token$Nqcc.identificador(remainingTokens$2[0]) !== "CloseParen") {
            console.log("Error, falta )");
          }
          if (remainingTokens$3) {
            var remainingTokens$4 = remainingTokens$3[1];
            if (Token$Nqcc.identificador(remainingTokens$3[0]) !== "OpenBrace") {
              console.log("Error, falta {");
            }
            if (remainingTokens$4) {
              Token$Nqcc.printTokenList(remainingTokens$4[1]);
              console.log(Token$Nqcc.identificador(remainingTokens$4[0]));
              var $$return = parse_statement(tokenList);
              return /* Fun */[
                      "main",
                      $$return
                    ];
            } else {
              throw [
                    Caml_builtin_exceptions.match_failure,
                    /* tuple */[
                      "Parser.re",
                      35,
                      6
                    ]
                  ];
            }
          } else {
            throw [
                  Caml_builtin_exceptions.match_failure,
                  /* tuple */[
                    "Parser.re",
                    30,
                    6
                  ]
                ];
          }
        } else {
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "Parser.re",
                  25,
                  6
                ]
              ];
        }
      } else {
        throw [
              Caml_builtin_exceptions.match_failure,
              /* tuple */[
                "Parser.re",
                20,
                6
              ]
            ];
      }
    } else {
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "Parser.re",
              15,
              6
            ]
          ];
    }
  } else {
    throw [
          Caml_builtin_exceptions.match_failure,
          /* tuple */[
            "Parser.re",
            9,
            6
          ]
        ];
  }
}

function parse_program(tokenList) {
  var func_decl = parse_function(tokenList);
  return /* Prog */[func_decl];
}

exports.parse_constant = parse_constant;
exports.parse_statement = parse_statement;
exports.parse_function = parse_function;
exports.parse_program = parse_program;
/* No side effect */
